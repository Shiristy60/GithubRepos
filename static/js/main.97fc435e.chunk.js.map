{"version":3,"sources":["components/DisplayRepos.js","App.js","reportWebVitals.js","index.js"],"names":["DisplayRepos","useState","githubId","setGithubId","language","setLanguage","repos","setRepos","error","setError","sort","a","b","forks_count","Navbar","className","NavbarBrand","href","Container","Form","onSubmit","e","preventDefault","fetch","then","res","json","data","message","FormGroup","Input","type","name","placeholder","value","onChange","target","Button","color","length","ListGroup","map","repo","toLowerCase","ListGroupItem","Row","Col","html_url","description","stargazers_count","watchers","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.97fc435e.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport { Button, Card, CardBody, CardImg, CardText, CardTitle, Col, Container, Form, FormGroup, Input, ListGroup, ListGroupItem, Navbar, NavbarBrand, Row } from 'reactstrap'\r\n\r\nconst DisplayRepos = () => {\r\n\r\n    const [githubId, setGithubId] = useState('')\r\n    const [language, setLanguage] = useState('')\r\n    const [repos, setRepos] = useState([])\r\n    const [error, setError] = useState('')\r\n\r\n    const handleId = (e) => {\r\n        setGithubId(e.target.value)\r\n    }\r\n\r\n    const handleLanguage = (e) => {\r\n        setLanguage(e.target.value)\r\n    }\r\n    \r\n    const getRepos = (e) => {\r\n        e.preventDefault()\r\n        fetch(`https://api.github.com/users/${githubId}/repos`)\r\n            .then(res => res.json())\r\n            .then(data => {\r\n                if (data.message) {\r\n                    setError(data.message)\r\n                } else {\r\n                    setRepos(data)\r\n                }\r\n        })\r\n    }\r\n\r\n    repos.sort(function (a, b) {\r\n        return b.forks_count - a.forks_count\r\n    })\r\n\r\n    return (\r\n        <>\r\n            <Navbar className='navbar'>\r\n                <NavbarBrand className='navbar-brand'href=\"/\">Github Repos</NavbarBrand>\r\n            </Navbar>\r\n            <Container>\r\n                {error !== ''\r\n                ? (<h1 className = 'text-center'> {error}</h1>)\r\n                    : (\r\n                        <>\r\n                            <div className = 'repos-form'>\r\n                                <Form onSubmit={getRepos}>\r\n                                    <FormGroup>\r\n                                        <Input\r\n                                            className = 'mb-4'\r\n                                            type='text'\r\n                                            name = 'githubusername'\r\n                                            placeholder='Github username'\r\n                                            value={githubId}\r\n                                            onChange={handleId}\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Input\r\n                                            className = 'mb-4'\r\n                                            type='text'\r\n                                            name = 'language'\r\n                                            placeholder='Enter language'\r\n                                            value={language}\r\n                                            onChange={handleLanguage}\r\n                                        />\r\n                                    </FormGroup>\r\n                                    <Button color=\"secondary\">Get Repos</Button>\r\n                                </Form>\r\n                            </div>\r\n                        {repos.length > 0\r\n                            ? (<ListGroup>\r\n                                {language !== ''\r\n                                    ? (repos.map(repo => (\r\n                                        (repo.language && repo.language.toLowerCase() === language.toLowerCase() && (\r\n                                            <ListGroupItem key={repo.id} className='mb-3 repo'>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <h3>\r\n                                                            <a href={repo.html_url}>\r\n                                                                {repo.name}\r\n                                                            </a>\r\n                                                        </h3>\r\n                                                        {repo.description ? <p><strong>Description:</strong> {repo.description}</p> : ''}\r\n                                                    </Col>\r\n                                                </Row>\r\n                                                <Row>\r\n                                                    <Col>\r\n                                                        <p><strong>Stars:</strong> {repo.stargazers_count}</p>\r\n                                                        <p><strong>Watchers:</strong> {repo.watchers}</p>\r\n                                                        <p><strong>Forks:</strong> {repo.forks_count}</p>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </ListGroupItem>\r\n                                        ))\r\n                                    )))\r\n                                    : (repos.map(repo => (\r\n                                        <ListGroupItem key={repo.id} className='mb-2'>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <h3>\r\n                                                        <a href={repo.html_url} className='text-info'>\r\n                                                            {repo.name}\r\n                                                        </a>\r\n                                                    </h3>\r\n                                                    <h4>{repo.description}</h4>\r\n                                                </Col>\r\n                                            </Row>\r\n                                            <Row>\r\n                                                <Col>\r\n                                                    <p>Stars: {repo.stargazers_count}</p>\r\n                                                    <p>Watchers: {repo.watchers}</p>\r\n                                                    <p>Forks: {repo.forks_count}</p>\r\n                                                </Col>\r\n                                            </Row>\r\n                                        </ListGroupItem>\r\n                                    )))\r\n                                }\r\n                            </ListGroup>)\r\n                                : (\r\n                                    <div className='no-repos'>\r\n                                        <h1> No Repos Yet</h1>\r\n                                    </div>\r\n                                )\r\n                            }\r\n                        </>\r\n                    )\r\n                }\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default DisplayRepos\r\n","import React from 'react'\nimport DisplayRepos from './components/DisplayRepos';\n\nfunction App() {\n  return (\n    <>\n      <DisplayRepos/>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}